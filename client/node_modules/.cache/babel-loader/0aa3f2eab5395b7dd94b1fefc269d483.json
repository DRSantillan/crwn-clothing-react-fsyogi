{"ast":null,"code":"import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth'; //\n\nconst config = {\n  apiKey: 'AIzaSyDsg-DyBV71EV9jE8WDf3BmxSThYwzntEg',\n  authDomain: 'react-store-auth-ztm.firebaseapp.com',\n  projectId: 'react-store-auth-ztm',\n  storageBucket: 'react-store-auth-ztm.appspot.com',\n  messagingSenderId: '385761028546',\n  appId: '1:385761028546:web:cf91e3010243eb1f9f4e5b',\n  measurementId: 'G-D2HP4P1MKH'\n}; //\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n// \tif (!userAuth) return;\n// \t// we are calling the db to see if the user is in the db.\n// \tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n// \tconst snapShot = await userRef.get();\n// \t// now if it doesnt exist we create a new user document and set it\n// \tif (!snapShot.exists) {\n// \t\tconst { displayName, email } = userAuth;\n// \t\tconst createdAt = new Date();\n// \t\ttry {\n// \t\t\t// set the new user document in the firestore db.\n// \t\t\tawait userRef.set({\n// \t\t\t\tdisplayName,\n// \t\t\t\temail,\n// \t\t\t\tcreatedAt,\n// \t\t\t\t...additionalData,\n// \t\t\t});\n// \t\t} catch (error) {\n// \t\t\tconsole.log('error creating user', error.message);\n// \t\t}\n// \t}\n// \treturn userRef;\n// };\n// export const addCollectionAndDocuments = async (\n// \tcollectionKey,\n// \tobjectsToAdd\n// ) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconsole.log(collectionRef);\n// \tconst batch = firestore.batch();\n// \tobjectsToAdd.forEach(obj => {\n// \t\tconst newDocRef = collectionRef.doc();\n// \t\tbatch.set(newDocRef, obj);\n// \t});\n// \treturn await batch.commit();\n// };\n// export const convertCollectionsSnapShotMap = collections => {\n// \tconst transformedCollection = collections.docs.map(doc => {\n// \t\tconst { title, items } = doc.data();\n// \t\treturn {\n// \t\t\trouteName: encodeURI(title.toLowerCase()),\n// \t\t\tid: doc.id,\n// \t\t\ttitle,\n// \t\t\titems,\n// \t\t};\n// \t});\n// \treturn transformedCollection.reduce((accumulator, collection) => {\n// \t\taccumulator[collection.title.toLowerCase()] = collection;\n// \t\treturn accumulator;\n// \t}, {});\n// };\n//\n\nfirebase.initializeApp(config); //\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); //\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["/Users/ecomdean/FullStackYogi/crwn-clothing-react-fsyogi/src/firebase/firebase.utilities.js"],"names":["firebase","config","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,qBAArB;AACA,OAAO,2BAAP;AACA,OAAO,sBAAP,C,CACA;;AACA,MAAMC,MAAM,GAAG;AACdC,EAAAA,MAAM,EAAE,yCADM;AAEdC,EAAAA,UAAU,EAAE,sCAFE;AAGdC,EAAAA,SAAS,EAAE,sBAHG;AAIdC,EAAAA,aAAa,EAAE,kCAJD;AAKdC,EAAAA,iBAAiB,EAAE,cALL;AAMdC,EAAAA,KAAK,EAAE,2CANO;AAOdC,EAAAA,aAAa,EAAE;AAPD,CAAf,C,CASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAR,QAAQ,CAACS,aAAT,CAAuBR,MAAvB,E,CACA;;AACA,OAAO,MAAMS,IAAI,GAAGV,QAAQ,CAACU,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGX,QAAQ,CAACW,SAAT,EAAlB,C,CAEP;;AACA,MAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACU,IAAT,CAAcG,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAMN,IAAI,CAACO,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAeZ,QAAf","sourcesContent":["import firebase from 'firebase/compat/app';\nimport 'firebase/compat/firestore';\nimport 'firebase/compat/auth';\n//\nconst config = {\n\tapiKey: 'AIzaSyDsg-DyBV71EV9jE8WDf3BmxSThYwzntEg',\n\tauthDomain: 'react-store-auth-ztm.firebaseapp.com',\n\tprojectId: 'react-store-auth-ztm',\n\tstorageBucket: 'react-store-auth-ztm.appspot.com',\n\tmessagingSenderId: '385761028546',\n\tappId: '1:385761028546:web:cf91e3010243eb1f9f4e5b',\n\tmeasurementId: 'G-D2HP4P1MKH',\n};\n//\n// export const createUserProfileDocument = async (userAuth, additionalData) => {\n// \tif (!userAuth) return;\n\n// \t// we are calling the db to see if the user is in the db.\n// \tconst userRef = firestore.doc(`users/${userAuth.uid}`);\n// \tconst snapShot = await userRef.get();\n// \t// now if it doesnt exist we create a new user document and set it\n// \tif (!snapShot.exists) {\n// \t\tconst { displayName, email } = userAuth;\n// \t\tconst createdAt = new Date();\n\n// \t\ttry {\n// \t\t\t// set the new user document in the firestore db.\n// \t\t\tawait userRef.set({\n// \t\t\t\tdisplayName,\n// \t\t\t\temail,\n// \t\t\t\tcreatedAt,\n// \t\t\t\t...additionalData,\n// \t\t\t});\n// \t\t} catch (error) {\n// \t\t\tconsole.log('error creating user', error.message);\n// \t\t}\n// \t}\n// \treturn userRef;\n// };\n\n// export const addCollectionAndDocuments = async (\n// \tcollectionKey,\n// \tobjectsToAdd\n// ) => {\n// \tconst collectionRef = firestore.collection(collectionKey);\n// \tconsole.log(collectionRef);\n\n// \tconst batch = firestore.batch();\n\n// \tobjectsToAdd.forEach(obj => {\n// \t\tconst newDocRef = collectionRef.doc();\n// \t\tbatch.set(newDocRef, obj);\n// \t});\n\n// \treturn await batch.commit();\n// };\n// export const convertCollectionsSnapShotMap = collections => {\n// \tconst transformedCollection = collections.docs.map(doc => {\n// \t\tconst { title, items } = doc.data();\n// \t\treturn {\n// \t\t\trouteName: encodeURI(title.toLowerCase()),\n// \t\t\tid: doc.id,\n// \t\t\ttitle,\n// \t\t\titems,\n// \t\t};\n// \t});\n\n// \treturn transformedCollection.reduce((accumulator, collection) => {\n// \t\taccumulator[collection.title.toLowerCase()] = collection;\n// \t\treturn accumulator;\n// \t}, {});\n// };\n//\nfirebase.initializeApp(config);\n//\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\n//\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({ prompt: 'select_account' });\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\n\nexport default firebase;\n"]},"metadata":{},"sourceType":"module"}