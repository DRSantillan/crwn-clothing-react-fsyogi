{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, conv } from '../../firebase/firebase.utilities';\nexport function* fetchCollectionsAsync() {\n  yield console.log('I am fired');\n  const collectionRef = firestore.collection('collections');\n  collectionRef.get().then(snapShot => {\n    const collectionsMap = convertCollectionsSnapShotMap(snapShot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["/Users/ecomdean/FullStackYogi/crwn-clothing-react-fsyogi/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","firestore","conv","fetchCollectionsAsync","console","log","collectionRef","collection","get","then","snapShot","collectionsMap","convertCollectionsSnapShotMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionsStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,IAApB,QAAgC,mCAAhC;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AACA,QAAMC,aAAa,GAAGL,SAAS,CAACM,UAAV,CAAqB,aAArB,CAAtB;AAEAD,EAAAA,aAAa,CACXE,GADF,GAEEC,IAFF,CAEOC,QAAQ,IAAI;AACjB,UAAMC,cAAc,GAAGC,6BAA6B,CAACF,QAAD,CAApD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACA,GALF,EAMEI,KANF,CAMQC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CANzB;AAOA;AAED,OAAO,UAAUC,qBAAV,GAAkC;AACxC,QAAMpB,SAAS,CACdC,eAAe,CAACoB,uBADF,EAEdjB,qBAFc,CAAf;AAIA","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\nimport ShopActionTypes from './shop.types';\nimport { firestore, conv } from '../../firebase/firebase.utilities';\n\nexport function* fetchCollectionsAsync() {\n\tyield console.log('I am fired');\n\tconst collectionRef = firestore.collection('collections');\n\t\n\tcollectionRef\n\t\t.get()\n\t\t.then(snapShot => {\n\t\t\tconst collectionsMap = convertCollectionsSnapShotMap(snapShot);\n\t\t\tdispatch(fetchCollectionsSuccess(collectionsMap));\n\t\t})\n\t\t.catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionsStart() {\n\tyield takeEvery(\n\t\tShopActionTypes.FETCH_COLLECTIONS_START,\n\t\tfetchCollectionsAsync\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}